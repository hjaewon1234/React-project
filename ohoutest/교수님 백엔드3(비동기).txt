[DB 데이터 삭제 후 아이템 띄우기]
프론트에서 삭제요청
서버에서 받음
서버에서 백엔드로 DB 삭제 요청
DB 가 삭제함
(비동기) 다되면 서버로 데이터 가져옴
서버에서 프론트로 데이터 넘겨줌
프론트에서 가져온 데이터를 통해 스테이트를 변경해줌


비동기처리의 방법
㉠ then (catch finally)
㉡ (권장)async await (try catch finally)

async () => {
  try {
    const temp = await promiseFunc();
    await promiseFunc1();
  } catch (err) {
    console.error(err);
  }
}

async () => {
// async는 함수앞에 붙여준다
  try {
// try는 오류가 생길지도 모르는 코드를 실행할때 쓴다
// ex) axios 서버요청 또는 DB 요청 등등
    const temp = await promiseFunc();
// 기다리고자 하는 promise 함수 앞에 await를 붙인다
// promiseFunc 함수가 resolve 함수를 호출할때까지 기다린다
	// resolve 함수는 promise 함수내에서 실행에 성공했을때 호출된다
	// resolve 함수의 매개변수를 return으로 받는다
// 만약, promiseFunc내에서 err 발생시 reject 함수를 호출한다
	// reject 함수 호출시 그 값을 catch에 전달한다 그리고 try가 끝난다
    await promiseFunc1();
  } catch (err) {
// try 내에서 오류 발생시 reject 함수가 호출되고 reject 함수의 매개변수를 매개변수 err로 전달받는다
    console.error(err);
  }
}

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
실행할함수().then((temp)=>{실행할코드})
===
const temp = await 실행할함수();
실행할코드
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

==================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
실행할함수().then((temp)=>{실행할코드}).catch((err)=>{console.error(err)}).finally(()=>{console.log("전부끝났어")})
===
try{
const temp = await 실행할함수();
실행할코드
} catch(err) {
console.error(err)
} finally {
// 항상 실행
console.log("전부끝났어")
}
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



-----------------------------------------------------------------------------------
const promiseFunc = (isTrue) => new Promise((resolve, reject)=>{
	if(isTrue) resolve("참이야")
	else reject("거짓이야")
})

